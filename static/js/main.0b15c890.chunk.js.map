{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/Chart/utils.js","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Card","title","value","countUpDuration","lastUpdate","description","customisations","Grid","item","component","MuiCard","xs","md","className","cx","styles","card","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","Cards","data","confirmed","recovered","deaths","container","spacing","justify","infected","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","makeLineChart","barChart","options","legend","display","makeBarChart","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","default","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","CoronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b15c890.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from \"react\";\nimport { Card as MuiCard, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\nimport cx from \"classnames\";\n\nimport styles from \"./Cards.module.css\";\n\nconst Card = ({ title, value, countUpDuration, lastUpdate, description, customisations }) => {\n    return (\n        <Grid item component={MuiCard} xs={12} md={3} className={cx(styles.card, customisations)}>\n            <CardContent>\n                <Typography color=\"textSecondary\" gutterBottom>{title}</Typography>\n                <Typography variant=\"h5\">\n                    <CountUp start={0} end={value} duration={countUpDuration} separator=\",\"/>\n                </Typography>\n                \n                <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                <Typography variant=\"body2\">{description}</Typography>\n            </CardContent>\n        </Grid>\n    )\n}\n\nconst Cards = ( {data: { confirmed, recovered, deaths, lastUpdate } }) => {\n    if (!confirmed) {\n        return 'Loading...';\n    }\n\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Card \n                    title=\"Infected\"\n                    value={confirmed.value}\n                    countUpDuration={1.5}\n                    lastUpdate={lastUpdate}\n                    description=\"Number of active cases of COVID-19\"\n                    customisations={styles.infected}\n                />\n                <Card \n                    title=\"Recovered\"\n                    value={recovered.value}\n                    countUpDuration={2.0}\n                    lastUpdate={lastUpdate}\n                    description=\"Number of recoveries from COVID-19\"\n                    customisations={styles.recovered}\n                />\n                <Card \n                    title=\"Deaths\"\n                    value={deaths.value}\n                    countUpDuration={2.5}\n                    lastUpdate={lastUpdate}\n                    description=\"Number of deaths casued by COVID-19\"\n                    customisations={styles.deaths}\n                />\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n    if(country){\n        changeableUrl = `${url}/countries/${country}`;\n    } \n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n        return { confirmed, recovered, deaths, lastUpdate };\n    } catch(error) {\n        console.log(error);\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }));\n        return modifiedData;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchCountries = async() => {\n    try {\n        const { data: { countries }} = await axios.get(`${url}/countries`);\n        return countries.map((country) => country.name)\n    } catch (error) {\n        console.log(error);\n    }\n}","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\n\nimport styles from \"./Chart.module.css\";\nimport { makeLineChart, makeBarChart } from \"./utils\";\n\nconst Chart = ({ data: {confirmed, deaths, recovered}, country }) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        fetchAPI();\n    }, []);\n\n    const lineChart = dailyData.length ? makeLineChart(dailyData) : null;\n    const barChart = confirmed ? makeBarChart(confirmed, recovered, deaths, country) : null;\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Chart;","import React from \"react\";\nimport { Bar, Line } from \"react-chartjs-2\";\n\nexport const makeLineChart = (dailyData) => {\n    return (\n        <Line \n            data={{\n                labels: dailyData.map(( {date} ) => date),\n                datasets: [{\n                    data: dailyData.map(( {confirmed} ) => confirmed),\n                    label: \"Infected\",\n                    borderColor: \"#3333ff\",\n                    fill: true\n                }, {\n                    data: dailyData.map(( {deaths} ) => deaths),\n                    label: \"Deaths\",\n                    borderColor: \"red\",\n                    backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n                    fill: true\n                }]\n            }}\n        />\n    )\n}\n\nexport const makeBarChart = (confirmed, recovered, deaths, country) => {\n    return (\n        <Bar\n            data={{\n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets: [{\n                    label: \"People\",\n                    backgroundColor: [\n                        \"rgba(0, 0, 255, 0.5)\",\n                        \"rgba(0, 255, 0, 0.5)\",\n                        \"rgba(255, 0, 0, 0.5)\"\n                    ],\n                    data: [ confirmed.value, recovered.value, deaths.value ],\n                }],\n            }}\n            options={{\n                legend: { display: false },\n                title: { display: true, title: `Current state in ${country}` }\n            }}\n        />\n    )\n}","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\n\nimport styles from \"./CountryPicker.module.css\";\n\nimport { fetchCountries } from \"../../api\";\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]); \n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n        fetchAPI();\n    })\n\n\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect default=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React from \"react\";\n\n\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport styles from \"./App.module.css\";\n\nimport { fetchData } from \"./api\";\n\nimport CoronaImage from './images/image.png'\n\nclass App extends React.Component {\n\n    state = {\n        data: {},\n        country: '',\n    }\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n        this.setState( { data: fetchedData } );\n    }\n\n    handleCountryChange = async (country) => {\n        const fetchedData = await fetchData(country);\n        this.setState( { data: fetchedData, country: country } );\n    }\n\n    render () {\n        const { data, country } = this.state\n        return (\n            <div className={styles.container}>\n                <img className={styles.image} src={CoronaImage} alt=\"COVID-19\"/>\n                <Cards data={data}/>\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Chart data={data} country={country}/>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}